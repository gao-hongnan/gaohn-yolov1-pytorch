Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# load directly the first batch of the train loader
y_trues = torch.load("./assets/y_trues.pt")
y_preds = torch.load("./assets/y_preds.pt")
print(f"y_trues.shape: {y_trues.shape}")
print(f"y_preds.shape: {y_preds.shape}")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
Cell [0;32mIn [5], line 2[0m
[1;32m      1[0m [38;5;66;03m# load directly the first batch of the train loader[39;00m
[0;32m----> 2[0m y_trues [38;5;241m=[39m [43mtorch[49m[38;5;241;43m.[39;49m[43mload[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43m./assets/y_trues.pt[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m      3[0m y_preds [38;5;241m=[39m torch[38;5;241m.[39mload([38;5;124m"[39m[38;5;124m./assets/y_preds.pt[39m[38;5;124m"[39m)
[1;32m      4[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124my_trues.shape: [39m[38;5;132;01m{[39;00my_trues[38;5;241m.[39mshape[38;5;132;01m}[39;00m[38;5;124m"[39m)

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:607[0m, in [0;36mload[0;34m(f, map_location, pickle_module, **pickle_load_args)[0m
[1;32m    605[0m             opened_file[38;5;241m.[39mseek(orig_position)
[1;32m    606[0m             [38;5;28;01mreturn[39;00m torch[38;5;241m.[39mjit[38;5;241m.[39mload(opened_file)
[0;32m--> 607[0m         [38;5;28;01mreturn[39;00m [43m_load[49m[43m([49m[43mopened_zipfile[49m[43m,[49m[43m [49m[43mmap_location[49m[43m,[49m[43m [49m[43mpickle_module[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mpickle_load_args[49m[43m)[49m
[1;32m    608[0m [38;5;28;01mreturn[39;00m _legacy_load(opened_file, map_location, pickle_module, [38;5;241m*[39m[38;5;241m*[39mpickle_load_args)

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:882[0m, in [0;36m_load[0;34m(zip_file, map_location, pickle_module, pickle_file, **pickle_load_args)[0m
[1;32m    880[0m unpickler [38;5;241m=[39m UnpicklerWrapper(data_file, [38;5;241m*[39m[38;5;241m*[39mpickle_load_args)
[1;32m    881[0m unpickler[38;5;241m.[39mpersistent_load [38;5;241m=[39m persistent_load
[0;32m--> 882[0m result [38;5;241m=[39m [43munpickler[49m[38;5;241;43m.[39;49m[43mload[49m[43m([49m[43m)[49m
[1;32m    884[0m torch[38;5;241m.[39m_utils[38;5;241m.[39m_validate_loaded_sparse_tensors()
[1;32m    886[0m [38;5;28;01mreturn[39;00m result

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:857[0m, in [0;36m_load.<locals>.persistent_load[0;34m(saved_id)[0m
[1;32m    855[0m data_type, key, location, size [38;5;241m=[39m data
[1;32m    856[0m [38;5;28;01mif[39;00m key [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m loaded_storages:
[0;32m--> 857[0m     [43mload_tensor[49m[43m([49m[43mdata_type[49m[43m,[49m[43m [49m[43msize[49m[43m,[49m[43m [49m[43mkey[49m[43m,[49m[43m [49m[43m_maybe_decode_ascii[49m[43m([49m[43mlocation[49m[43m)[49m[43m)[49m
[1;32m    858[0m storage [38;5;241m=[39m loaded_storages[key]
[1;32m    859[0m [38;5;28;01mreturn[39;00m storage

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:846[0m, in [0;36m_load.<locals>.load_tensor[0;34m(data_type, size, key, location)[0m
[1;32m    843[0m dtype [38;5;241m=[39m data_type([38;5;241m0[39m)[38;5;241m.[39mdtype
[1;32m    845[0m storage [38;5;241m=[39m zip_file[38;5;241m.[39mget_storage_from_record(name, size, dtype)[38;5;241m.[39mstorage()
[0;32m--> 846[0m loaded_storages[key] [38;5;241m=[39m [43mrestore_location[49m[43m([49m[43mstorage[49m[43m,[49m[43m [49m[43mlocation[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:175[0m, in [0;36mdefault_restore_location[0;34m(storage, location)[0m
[1;32m    173[0m [38;5;28;01mdef[39;00m [38;5;21mdefault_restore_location[39m(storage, location):
[1;32m    174[0m     [38;5;28;01mfor[39;00m _, _, fn [38;5;129;01min[39;00m _package_registry:
[0;32m--> 175[0m         result [38;5;241m=[39m [43mfn[49m[43m([49m[43mstorage[49m[43m,[49m[43m [49m[43mlocation[49m[43m)[49m
[1;32m    176[0m         [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    177[0m             [38;5;28;01mreturn[39;00m result

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:151[0m, in [0;36m_cuda_deserialize[0;34m(obj, location)[0m
[1;32m    149[0m [38;5;28;01mdef[39;00m [38;5;21m_cuda_deserialize[39m(obj, location):
[1;32m    150[0m     [38;5;28;01mif[39;00m location[38;5;241m.[39mstartswith([38;5;124m'[39m[38;5;124mcuda[39m[38;5;124m'[39m):
[0;32m--> 151[0m         device [38;5;241m=[39m [43mvalidate_cuda_device[49m[43m([49m[43mlocation[49m[43m)[49m
[1;32m    152[0m         [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(obj, [38;5;124m"[39m[38;5;124m_torch_load_uninitialized[39m[38;5;124m"[39m, [38;5;28;01mFalse[39;00m):
[1;32m    153[0m             storage_type [38;5;241m=[39m [38;5;28mgetattr[39m(torch[38;5;241m.[39mcuda, [38;5;28mtype[39m(obj)[38;5;241m.[39m[38;5;18m__name__[39m)

File [0;32m/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/torch/serialization.py:135[0m, in [0;36mvalidate_cuda_device[0;34m(location)[0m
[1;32m    132[0m device [38;5;241m=[39m torch[38;5;241m.[39mcuda[38;5;241m.[39m_utils[38;5;241m.[39m_get_device_index(location, [38;5;28;01mTrue[39;00m)
[1;32m    134[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m torch[38;5;241m.[39mcuda[38;5;241m.[39mis_available():
[0;32m--> 135[0m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m([38;5;124m'[39m[38;5;124mAttempting to deserialize object on a CUDA [39m[38;5;124m'[39m
[1;32m    136[0m                        [38;5;124m'[39m[38;5;124mdevice but torch.cuda.is_available() is False. [39m[38;5;124m'[39m
[1;32m    137[0m                        [38;5;124m'[39m[38;5;124mIf you are running on a CPU-only machine, [39m[38;5;124m'[39m
[1;32m    138[0m                        [38;5;124m'[39m[38;5;124mplease use torch.load with map_location=torch.device([39m[38;5;130;01m\'[39;00m[38;5;124mcpu[39m[38;5;130;01m\'[39;00m[38;5;124m) [39m[38;5;124m'[39m
[1;32m    139[0m                        [38;5;124m'[39m[38;5;124mto map your storages to the CPU.[39m[38;5;124m'[39m)
[1;32m    140[0m device_count [38;5;241m=[39m torch[38;5;241m.[39mcuda[38;5;241m.[39mdevice_count()
[1;32m    141[0m [38;5;28;01mif[39;00m device [38;5;241m>[39m[38;5;241m=[39m device_count:

[0;31mRuntimeError[0m: Attempting to deserialize object on a CUDA device but torch.cuda.is_available() is False. If you are running on a CPU-only machine, please use torch.load with map_location=torch.device('cpu') to map your storages to the CPU.
RuntimeError: Attempting to deserialize object on a CUDA device but torch.cuda.is_available() is False. If you are running on a CPU-only machine, please use torch.load with map_location=torch.device('cpu') to map your storages to the CPU.

